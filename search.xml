<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Date类型转换，获取时间差</title>
      <link href="/2020/07/01/date-lei-xing-zhuan-huan-huo-qu-shi-jian-chai/"/>
      <url>/2020/07/01/date-lei-xing-zhuan-huan-huo-qu-shi-jian-chai/</url>
      
        <content type="html"><![CDATA[<h5 id="Date和String类型互相转化："><a href="#Date和String类型互相转化：" class="headerlink" title="Date和String类型互相转化："></a>Date和String类型互相转化：</h5><pre class=" language-java"><code class="language-java">SimpleDateFormat dateformat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date currentTime<span class="token operator">=</span>dateformat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-4-12 14:15:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出：Sun Jul 12 14:15:00 CST 2020</span>String dateStr <span class="token operator">=</span> dateformat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出：2020-07-12 14:15:00</span></code></pre><h5 id="Date时间类型比较大小"><a href="#Date时间类型比较大小" class="headerlink" title="Date时间类型比较大小"></a>Date时间类型比较大小</h5><p>可使用Date类中的compareTo()方法，该方法类似于BigDecimal种的compareTo()方法。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//定义两个date类型的变量，可以换成需要比较的字符串</span>SimpleDateFormat dateformat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date time<span class="token operator">=</span>dateformat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-7-14 14:18:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date time1<span class="token operator">=</span>dateformat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-7-13 14:15:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>time1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date time2<span class="token operator">=</span>dateformat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-7-11 14:18:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date times3<span class="token operator">=</span>dateformat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-7-13 14:15:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time2<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>times3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date time4<span class="token operator">=</span>dateformat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-7-13 14:15:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Date times5<span class="token operator">=</span>dateformat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2020-7-13 14:15:00"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time4<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>times5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果time比time1大则输出1，相反若time1比time大则输出1。如果两个相等则输出0<br><img src="https://img-blog.csdnimg.cn/20200701174336889.png" alt="比较获取的结果集"></p><h5 id="时间类型时间差"><a href="#时间类型时间差" class="headerlink" title="时间类型时间差"></a>时间类型时间差</h5><p>计算时间类型（yyyy-MM-dd HH:mm:ss）时间差，类型可换成自己需要的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">long</span> getDate <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前计算机时间</span><span class="token comment" spellcheck="true">//将获取到的时间转成String类型</span>String dateStr <span class="token operator">=</span> dateformat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>getDate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//再转换成Date类型</span>Date time<span class="token operator">=</span>dateformat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dateStr<span class="token punctuation">)</span><span class="token punctuation">;</span>Date submitDate<span class="token operator">=</span>dateformat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"String类型的时间"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//当前时间-String类型的时间</span><span class="token keyword">long</span> los<span class="token operator">=</span>time<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>submitDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>submitDate的时间大于当前时间则结果为负数，计算出来的是毫秒<br>los/1000：秒<br>los/1000/60：分<br>los/1000/3600：小时</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200701175821305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzA3OTIx,size_16,color_FFFFFF,t_70" alt="time比submitDate小，所以输出的是负数。"></p><p><img src="https://img-blog.csdnimg.cn/20200701181044459.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzA3OTIx,size_16,color_FFFFFF,t_70" alt="time比submitDate大，所以输出的是正数。"></p><p><img src="https://img-blog.csdnimg.cn/20200701181133867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzA3OTIx,size_16,color_FFFFFF,t_70" alt="如果两个相等则输出0."></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java正则匹配是否为时间格式</title>
      <link href="/2020/06/30/java-zheng-ze-pi-pei-shi-fou-wei-shi-jian-ge-shi/"/>
      <url>/2020/06/30/java-zheng-ze-pi-pei-shi-fou-wei-shi-jian-ge-shi/</url>
      
        <content type="html"><![CDATA[<h5 id="使用正则表达式判断"><a href="#使用正则表达式判断" class="headerlink" title="使用正则表达式判断"></a>使用正则表达式判断</h5><blockquote><p>使用正则表达式判断String类型的字符串是否为时间格式yyyy-MM-dd HH:mm:ss</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">valiDateTime</span><span class="token punctuation">(</span>String timeStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String format <span class="token operator">=</span> <span class="token string">"((19|20)[0-9]{2})-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])([01]?[0-9]|2[0-3]):[0-5]?[0-9]:[0-5]?[0-9]"</span><span class="token punctuation">;</span>        Pattern pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>        Matcher matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>timeStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pattern <span class="token operator">=</span> Pattern<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(\\d{4})-(\\d+)-(\\d+).*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>timeStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> y <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> d <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">></span> <span class="token number">28</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Calendar c <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    c<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> lastDay <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">getActualMaximum</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span>lastDay <span class="token operator">>=</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>如果判断的只有年月日，即把format换成<br><strong>String format = “((19|20)[0-9]{2})-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])”;</strong></p><p>获取当月的第一天<br><strong><em>Calendar.getInstance().getActualMinimum(Calendar.DAY_OF_MONTH)</em></strong><br>获取当月的最后一天<br><strong><em>Calendar.getInstance().getActualMaximum(Calendar.DAY_OF_MONTH)</em></strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> java,正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integer函数</title>
      <link href="/2020/06/30/integer-han-shu/"/>
      <url>/2020/06/30/integer-han-shu/</url>
      
        <content type="html"><![CDATA[<p>Integer.parseInt()函数：将字符串参数解析为带符号的十进制整数，返回由十进制参数表示的整数值。</p><blockquote><p>简单点就是将String类型的数字，转换成int类型</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s<span class="token operator">=</span><span class="token string">"120"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span>Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出120</span>    <span class="token punctuation">}</span></code></pre><p>这是parseInt函数的源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> radix<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//radix默认是10</span>                <span class="token keyword">throws</span> NumberFormatException<span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//大于2</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>radix <span class="token operator">&lt;</span> Character<span class="token punctuation">.</span>MIN_RADIX<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"radix "</span> <span class="token operator">+</span> radix <span class="token operator">+</span>                                            <span class="token string">" less than Character.MIN_RADIX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//小于36</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>radix <span class="token operator">></span> Character<span class="token punctuation">.</span>MAX_RADIX<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NumberFormatException</span><span class="token punctuation">(</span><span class="token string">"radix "</span> <span class="token operator">+</span> radix <span class="token operator">+</span>                                            <span class="token string">" greater than Character.MAX_RADIX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> negative <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token operator">-</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> multmin<span class="token punctuation">;</span>        <span class="token keyword">int</span> digit<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> firstChar <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>firstChar <span class="token operator">&lt;</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Possible leading "+" or "-"</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>firstChar <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    negative <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    limit <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>firstChar <span class="token operator">!=</span> <span class="token string">'+'</span><span class="token punctuation">)</span>                    <span class="token keyword">throw</span> NumberFormatException<span class="token punctuation">.</span><span class="token function">forInputString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Cannot have lone "+" or "-"</span>                    <span class="token keyword">throw</span> NumberFormatException<span class="token punctuation">.</span><span class="token function">forInputString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            multmin <span class="token operator">=</span> limit <span class="token operator">/</span> radix<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Accumulating negatively avoids surprises near MAX_VALUE</span>                digit <span class="token operator">=</span> Character<span class="token punctuation">.</span><span class="token function">digit</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">,</span>radix<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>digit <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> NumberFormatException<span class="token punctuation">.</span><span class="token function">forInputString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> multmin<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> NumberFormatException<span class="token punctuation">.</span><span class="token function">forInputString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                result <span class="token operator">*=</span> radix<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> limit <span class="token operator">+</span> digit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> NumberFormatException<span class="token punctuation">.</span><span class="token function">forInputString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                result <span class="token operator">-=</span> digit<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> NumberFormatException<span class="token punctuation">.</span><span class="token function">forInputString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> negative <span class="token operator">?</span> result <span class="token operator">:</span> <span class="token operator">-</span>result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>默认传的radix为10，就是10进制</p><p>校验传过来的数据只能为数字：</p><blockquote><p>matches方法主要是返回是否匹配指定的字符串，如果匹配则为true,否则为false;</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String i<span class="token operator">=</span><span class="token string">"72"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出Yes</span>        <span class="token comment" spellcheck="true">// String i="ass";  输出No</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"[0-9]*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> parseInt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解析Xml</title>
      <link href="/2020/06/29/jie-xi-xml/"/>
      <url>/2020/06/29/jie-xi-xml/</url>
      
        <content type="html"><![CDATA[<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>做webservice的时候要解析xml，通过查找发现JAXB是可以解析xml并转换成对象的</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@XmlAccessorType</span><span class="token punctuation">(</span>XmlAccessType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@XmlType</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"标签名称"</span><span class="token punctuation">,</span> propOrder<span class="token operator">=</span><span class="token punctuation">{</span>属性名称<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@XmlRootElement</span>        <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderRequestMsgHeader</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**      *@XmlElement里面的name跟xml里面节点内的标签对应      */</span>    <span class="token annotation punctuation">@XmlElement</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"msgHeader"</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> MsgHeader msgHeader<span class="token punctuation">;</span>    <span class="token annotation punctuation">@XmlElement</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"ORDER_CODE"</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String orderCode<span class="token punctuation">;</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="MsgHeader类："><a href="#MsgHeader类：" class="headerlink" title="MsgHeader类："></a>MsgHeader类：</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@XmlAccessorType</span><span class="token punctuation">(</span>XmlAccessType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@XmlType</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"msgHeader"</span><span class="token punctuation">,</span> propOrder<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"USERNAME"</span><span class="token punctuation">,</span><span class="token string">"PAGESIZE"</span><span class="token punctuation">,</span><span class="token string">"CURRENT_PAGE"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@XmlRootElement</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"msgHeader"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgHeader</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@XmlElement</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"USERNAME"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String USERNAME<span class="token punctuation">;</span>    <span class="token annotation punctuation">@XmlElement</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"PAGESIZE"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String PAGESIZE<span class="token punctuation">;</span>    <span class="token annotation punctuation">@XmlElement</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"CURRENT_PAGE"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String CURRENT_PAGE<span class="token punctuation">;</span>    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><p>这是传过来的xml格式的数据，标签中orderRequestMsgHeader对应的是@XmlType中的name,msgHeader对应的就是@XmlElement中的名称</p><pre class=" language-java"><code class="language-java">String xml<span class="token operator">=</span><span class="token string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"</span> <span class="token operator">+</span>                <span class="token string">"&lt;orderRequestMsgHeader>\r"</span><span class="token operator">+</span>                <span class="token string">"&lt;msgHeader>\r"</span> <span class="token operator">+</span>                 <span class="token string">"&lt;USERNAME>***有限公司&lt;/USERNAME>\r"</span> <span class="token operator">+</span>                 <span class="token string">"&lt;PAGESIZE>50&lt;/PAGESIZE>\r"</span> <span class="token operator">+</span>                 <span class="token string">"&lt;CURRENT_PAGE>1&lt;/CURRENT_PAGE>\r"</span> <span class="token operator">+</span>                 <span class="token string">"&lt;/msgHeader>\r"</span><span class="token operator">+</span>                <span class="token string">"&lt;ORDER_CODE>000051&lt;/ORDER_CODE>\r"</span>                 <span class="token string">"&lt;/orderRequestMsgHeader>"</span><span class="token punctuation">;</span></code></pre><p>通过JAXB解析Xml文件</p><h4 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h4><pre class=" language-java"><code class="language-java">OrderRequestMsgHeader header<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">OrderRequestMsgHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//要转换未的类信息</span>            JAXBContext jaxbContext <span class="token operator">=</span> JAXBContext<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>OrderRequestMsgHeader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建JAXBContext对象，注意一定要传@XmlRootElement的所标记的类的类型</span>            Unmarshaller unmarshaller <span class="token operator">=</span> jaxbContext<span class="token punctuation">.</span><span class="token function">createUnmarshaller</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//拿到xml解析对象</span>            StringReader sr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>            header <span class="token operator">=</span> <span class="token punctuation">(</span>OrderRequestMsgHeader<span class="token punctuation">)</span>unmarshaller<span class="token punctuation">.</span><span class="token function">unmarshal</span><span class="token punctuation">(</span>sr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转换后的对象信息</span>            <span class="token punctuation">]</span></code></pre><p>解析后的header：<code>OrderRequestMsgHeader [msgHeader=MsgHeader{ USERNAME='纸业有限公司', SUBMITDATE='2020-01-01 12:12:12', PAGESIZE='50', CURRENT_PAGE='1', }, orderCode=000051</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> xml </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xml ， springboot ， JAXBContext </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2020/06/28/test/"/>
      <url>/2020/06/28/test/</url>
      
        <content type="html"><![CDATA[<h4 id="文章测试"><a href="#文章测试" class="headerlink" title="文章测试"></a>文章测试</h4><p>​<code>@MapperScan("com.bit.urms_supplier.mapper")@SpringBootApplication​</code><br><em>sss斜体</em><br><strong>粗体</strong><br><strong><em>加粗斜体</em></strong><br><del>删除线</del></p><blockquote><p>文字引用</p></blockquote><p><code>行内代码</code></p><p><a href="https://blog.csdn.net/wsmrzx/article/details/81478945" target="_blank" rel="noopener">示例链接</a></p><p>例如：<img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1593346070989&amp;di=5dc46ec638ad054a784ea6255b89216c&amp;imgtype=0&amp;src=http%3A%2F%2Fimg3.imgtn.bdimg.com%2Fit%2Fu%3D3885109978%2C829038721%26fm%3D214%26gp%3D0.jpg" alt="示例图片"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> bootstrap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/28/hello-world/"/>
      <url>/2020/06/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
